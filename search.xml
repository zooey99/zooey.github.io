<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>JS中的模块解析笔记</title>
      <link href="/2023/01/06/JS%E4%B8%AD%E7%9A%84%E6%A8%A1%E5%9D%97%E8%A7%A3%E6%9E%90%E7%AC%94%E8%AE%B0/"/>
      <url>/2023/01/06/JS%E4%B8%AD%E7%9A%84%E6%A8%A1%E5%9D%97%E8%A7%A3%E6%9E%90%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p><strong>背景</strong> </p><h3 id="Es6-import-and-Export"><a href="#Es6-import-and-Export" class="headerlink" title="Es6 import and Export"></a>Es6 import and Export</h3><p>翻看同事代码，一目了然，心里就两词so easy,But自己写的时候what？why?<br>一.写import and Export demo前的心路历程<br>Export和import都知道中文意思导入和导出，那就需要两个js文件，一个写export，一个写import，简单的写了两段demo</p><pre data-enlighter-language="">index.jsvar PI = 3.14;var add = function (x, y) {return x + y;}module.exports.PI = PI;module.exports.add = add;main.jsimport * as Math from   './js/index.js';console.log(Math.PI);console.log(Math.add(1,2));</pre><p>巴拉巴拉写完后，激动的在控制台敲node main.js，然而，奇迹没有出现，但是意外发生了（SyntaxError: Unexpected token import）<br>![img_1.png](source/_posts/images/JS中的模块解析 /img_1.png)</p><p>这是为什么呢？做了很多的测试，也走了不少弯路，才发现原来是，node.js不支持es6 import语法,需要借助babel</p><p>参考下面文章，豁然开朗，yes,终于跑出来了<br>![img_2.png](source/_posts/images/JS中的模块解析 /img_2.png)</p><p>参考<br><a href="https://yanyinhong.github.io/2017/06/30/Support-ES6-for-nodejs/">https://yanyinhong.github.io/2017/06/30/Support-ES6-for-nodejs/</a></p><p>二.接下来,就开始coding了<br>export，import， module.export 到底咋回事？<br>其中的关联与区别不得其解，使用起来也糊里糊涂</p>]]></content>
      
      
      <categories>
          
          <category> 问题搜集 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS遍历最优方案解析</title>
      <link href="/2023/01/06/JS%E9%81%8D%E5%8E%86%E6%9C%80%E4%BC%98%E6%96%B9%E6%A1%88%E8%A7%A3%E6%9E%90/"/>
      <url>/2023/01/06/JS%E9%81%8D%E5%8E%86%E6%9C%80%E4%BC%98%E6%96%B9%E6%A1%88%E8%A7%A3%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<p>map()VS .forEach()VS for()</p><p>三者如何选择？<br>var list=[1,2,3];<br>一.map<br>传入要执行的回调函数，函数有三个参数（数组元素「必选」，数组元素索引值「可选」，数组本身「可选」）</p><p>list.map(i=&gt;{console.log(i)});<br>二.forEach<br>传入要执行的回调函数，函数有三个参数（数组元素「必选」，数组元素索引值「可选」，数组本身「可选」）</p><p>list.forEach(i=&gt;console.log(i));<br>三.for<br>使用频率最高，也是最基本的一种遍历方式,可使用break、continue；</p><p>for(let i=0;i&lt;list.length;i++){<br>console.log(i);<br>}<br>小结：<br>.map()和.forEach简短一些，可读性更强，同时他们创建了自己的scope,而for遍历后会把，i和l这两个元素挂起来。<br>.map比.forEach执行速度更快。.forEach返回undefined，map 返回新数组；<br>三者排序 .map&gt;.forEach&gt;for</p><p>补充：for…in与for…of</p><p>for…in</p><p>let list=[4,5,6];<br>for(let i in list){<br>console.log(i);//0,1,2<br>}<br>Array.prototype.sayHello = function () {<br>console.log(‘sayHello’);<br>};<br>Array.prototype.str = ‘hello’;<br>var my = [1, 2, 3, 4, 5];<br>my.name = ‘Cai’;<br>for (let index in my) {<br>console.log(<code>用于数组===$&#123;index&#125;</code>);<br>}<br>Object.prototype.objectHello = function () {<br>console.log(‘objectHello’);<br>};<br>Object.prototype.objectStr = ‘object’;<br>var obj = {<br>‘a’: ‘caibaoyu’,<br>‘old’: 12<br>}<br>console.log(obj);<br>for (let i in obj) {<br>if (obj.hasOwnProperty(i)) {<br>console.log(<code>用于对象===$&#123;i&#125;</code>);<br>}<br>}</p><hr><p>// 首先输出的是对象的属性名，再是对象原型中的属性和方法，<br>// 如果不想输出原型中的属性和方法，可以使用hasOwnProperty 过滤<br>for…of<br>提供了3种方法</p><p>key()是对键名的遍历；<br>value()是对键值的遍历；<br>entries()是对键值对的遍历；<br>example1:<br>let list=[4,5,6];<br>for(let i of list){<br>console.log(i);//4,5,6</p><p>}<br>example2:<br>let arr = [‘cai’, ‘bao’, ‘yu’];<br>for (let item of arr) {<br>console.log(item); //<br>}<br>// 输出数组索引<br>for (let item of arr.keys()) {<br>console.log(item);  // 0 1 2<br>}<br>// 输出内容和索引<br>for (let [item, val] of arr.entries()) {<br>console.log(item + ‘:’ + val); //<br>}<br>for…in    用于数组循环返回的是数组的下标和数组的属性和原型上的方法和属性<br>用于对象循环返回的对象的属性名和原型上的方法和属性<br>for…of    用于数组循环返回的是数组元素值<br>for…in 推荐用于循环对象 for…of 推荐用于遍历数组</p>]]></content>
      
      
      <categories>
          
          <category> Javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端存储常用属性</title>
      <link href="/2023/01/06/cookie/"/>
      <url>/2023/01/06/cookie/</url>
      
        <content type="html"><![CDATA[<p><strong>背景</strong> </p><p>一、Cookie</p><p>二、localstorage</p>]]></content>
      
      
      <categories>
          
          <category> 个人笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Html5 video 标签</title>
      <link href="/2023/01/06/h5-video/"/>
      <url>/2023/01/06/h5-video/</url>
      
        <content type="html"><![CDATA[<blockquote><p><strong>背景</strong> 随着 4G 的普遍以及 WiFi 的广泛使用，手机上的网速已经足够稳定和高速，以视频为主的 HTML5 也越来越普遍了，相比帧动画，视频的表现更加丰富，前段时间开发了一个以视频为主的移动端 HTML5，在这里介绍一些实践经验。</p></blockquote><h2 id="统一播放效果"><a href="#统一播放效果" class="headerlink" title="统一播放效果"></a>统一播放效果</h2><p>我们希望视频播放时可以全屏播放，没有进度条、播放按钮等与系统相关的元素，可以在视频上方增加自定义的元素（比如一个跳过按钮），类型下面的效果：<br>在不同的操作系统（主要就是 iOS 和 Android），为了达到比较统一的播放效果，分别对其进行兼容。</p><h3 id="iOS"><a href="#iOS" class="headerlink" title="iOS"></a>iOS</h3><p>在 iOS 上，APP 都是使用的系统自带的浏览器进行页面渲染，video 播放视频的效果是统一的，只需要考虑不同的 iOS 版本是否有不一致的地方。在 iOS 上，播放视频默认会弹出一个播放器全屏播放视频，如下效果</p><p>播放器上下有的系统默认的控制栏，可以控制视频的播放进度、音量以及暂停或继续播放，播放视频时，视频会 “浮” 在页面上，页面上的所有元素都只能是在视频下面，这种效果显然不是我们想要的。 但好在 iOS 10 Safari 中，video 新增了 playsinline 属性，可以使视频内联播放。</p><p>在 webkit 的 blog 上提到</p><blockquote><p>A note about the playsinline attribute: this attribute has recently been added to the HTML specification, and WebKit has adopted this new attribute by unprefixing its legacy webkit-playsinline attribute. This legacy attribute has been supported since iPhoneOS 4.0, and accordance with our updated unprefixing policy, we’re pleased to have been able to unprefix webkit-playsinline.</p></blockquote><p>iOS 10 之前的版本支持 webkit-playsinline，但是加了这个属性后，在 iOS 9 的上出现只能听到声音不能看到画面的问题，最后使用的标签代码</p><p><video id="video" class="video" preload="auto" playsinline src="http://wqs.jd.com/promote/superfestival/superfestival.mp4" width="1" height="1" type="video/mp4"></video><br>然后再加上这个库 iphone-inline-video 一起使用。</p><h3 id="Android"><a href="#Android" class="headerlink" title="Android"></a>Android</h3><p>在 Android 上，因为各个软件使用的浏览器渲染引擎不一样，所以视频播放的效果差异也很大，这里主要以微信为主。微信使用的是自带的渲染引擎 TBS，默认的播放效果</p><p>在播放器的下方也是会有控制栏，视频也会 “浮” 在页面上。而 Android 是不支持 playsinline 属性使视频内联播放的。但是，如果你看过一些腾讯的视频类 HTML5，会发现它们在微信里是可以内联播放的，而这个功能是需要申请加入白名单的。</p><p>不过新版的 TBS 内核（&gt;=036849）支持一个叫 同层播放器 的视频播放器，这个不需要申请白名单，只需给 video 设置两个属性 x5-video-player-type=”h5” 和 x5-video-player-fullscreen=”true”，播放效果</p><p>当点击左上角的箭头的时，会退出播放</p><p>退出播放时，我们需要做相应的处理。TBS 有提供相应的事件，不过不同的版本有一点差异</p><p>![img.png](source/_posts/images/Html5 Video标签/img.png)</p><pre data-enlighter-language="">document.getElementById('video').addEventListener("x5videoexitfullscreen", function(){alert("exit fullscreen")})document.getElementById('video').addEventListener("x5videoenterfullscreen", function(){alert("enter fullscreen")})</pre><p>在对话框中发送 //gettbs 可以查看相关信息，tbsCoreVersion 就是当前安装的 TBS 内核版本。</p><p>video 的事件<br>video 支持的事件很多，但在有些事件在不同的系统上跟预想的表现不一致，在尝试比较之后，使用 timeupdate 和 ended 这两个事件基本可以满足需求</p><pre data-enlighter-language="">video.addEventListener('timeupdate', function (e) {console.log(video.currentTime) // 当前播放的进度})video.addEventListener('ended', function (e) {// 播放结束时触发})</pre><p>视频居中<br>视频的宽高比是固定的，而手机的屏幕宽高比则不是，所以，为了让观看到的视频的体验尽可能一致，以宽度为先，进行适配</p><pre data-enlighter-language="">function handleResize() {var sWidth = 9var sHeight = 16var width = window.innerWidthvar height = window.innerHeightvar marginTop = height - (width * sHeight) / sWidthmarginTop = Math.round(marginTop)if (marginTop < -2) {video.$wrapper.css('marginTop', marginTop / 2 + 'px')} else {video.$wrapper.css('marginTop', '0')}}</pre>]]></content>
      
      
      <categories>
          
          <category> 个人笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Html </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue源码分析</title>
      <link href="/2021/06/26/Vue%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
      <url>/2021/06/26/Vue%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h3 id="131213"><a href="#131213" class="headerlink" title="131213"></a>131213</h3><p>131213131213131213131213</p>]]></content>
      
      
      <categories>
          
          <category> 源码分析 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>重学前端</title>
      <link href="/2021/06/26/%E9%87%8D%E5%AD%A6%E5%89%8D%E7%AB%AF/"/>
      <url>/2021/06/26/%E9%87%8D%E5%AD%A6%E5%89%8D%E7%AB%AF/</url>
      
        <content type="html"><![CDATA[<h3 id="131213"><a href="#131213" class="headerlink" title="131213"></a>131213</h3>]]></content>
      
      
      <categories>
          
          <category> 独立思考 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>JS中深拷贝和浅拷贝</title>
      <link href="/2020/10/06/JS%E4%B8%AD%E6%B7%B1%E6%8B%B7%E8%B4%9D%E5%92%8C%E6%B5%85%E6%8B%B7%E8%B4%9D/"/>
      <url>/2020/10/06/JS%E4%B8%AD%E6%B7%B1%E6%8B%B7%E8%B4%9D%E5%92%8C%E6%B5%85%E6%8B%B7%E8%B4%9D/</url>
      
        <content type="html"><![CDATA[<p><strong>背景</strong><br>一、Cookie</p><p>二、localstorage</p>]]></content>
      
      
      <categories>
          
          <category> 个人笔记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>ES6异步回调地狱</title>
      <link href="/2020/01/06/ES6%E5%BC%82%E6%AD%A5%E5%9B%9E%E8%B0%83%E5%9C%B0%E7%8B%B1/"/>
      <url>/2020/01/06/ES6%E5%BC%82%E6%AD%A5%E5%9B%9E%E8%B0%83%E5%9C%B0%E7%8B%B1/</url>
      
        <content type="html"><![CDATA[<p><strong>背景</strong></p><p>一、anysc /await</p>]]></content>
      
      
      <categories>
          
          <category> 个人笔记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>PHP环境搭建</title>
      <link href="/2019/11/06/PHP/"/>
      <url>/2019/11/06/PHP/</url>
      
        <content type="html"><![CDATA[<h2 id="PHP环境搭建（避坑小指南）"><a href="#PHP环境搭建（避坑小指南）" class="headerlink" title="PHP环境搭建（避坑小指南）"></a>PHP环境搭建（避坑小指南）</h2><p>一、Mac 更改apache 文件系统目录</p><ol><li><p>cd /ect/apache2</p></li><li><p>修改DocumnetRoot 配置</p><pre data-enlighter-language="">sudo vim https.conf</pre></li><li><p><strong>给新的目录开放访问权限</strong></p><pre data-enlighter-language="">chmod 755 目录</pre></li><li><p>重启apache</p><pre data-enlighter-language="">Sudo apachectl restart</pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> 问题搜集 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Package.json 中 browser ,module, main</title>
      <link href="/2019/11/06/Package%20json/"/>
      <url>/2019/11/06/Package%20json/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 问题搜集 </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
